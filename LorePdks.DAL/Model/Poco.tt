<#@ include file="OrmLite.Core.ttinclude" #>
<#
	// Settings
	ConnectionStringName = "Connection";			// Uses last connection string in config if not specified
	var Namespace = "LorePdks.DAL.Model";
	//SchemaName = "borsa";
	SchemaName = "u1555990_lorepdk";
	

	IncludeViews = true;
	ClassPrefix = "";
	ClassSuffix = "";
	bool SplitIntoMultipleFiles = true;		// if true: Generates one file for every class
	bool MakeSingular = false;			// if true: Changes the classname to singular if tablename is not singular
	bool UseIdAsPK = false;				// if true: Changes the primary key property name to Id
	bool GenerateConstructor = true;		// if true: Generates the default empty constructor 
	//EntityInfoTable = "T_ISKOP_DOTNET_ENTITYINFO";

    // Read schema 
	var tables = LoadTables(MakeSingular);

	var entityInfos = LoadEntityInfos();  

/*
	// Tweak Schema
	tables["tablename"].Ignore = true;							// To ignore a table
	tables["tablename"].ClassName = "newname";					// To change the class name of a table
	tables["tablename"]["columnname"].Ignore = true;			// To ignore a column
	tables["tablename"]["columnname"].PropertyName="newname";	// To change the property name of a column
	tables["tablename"]["columnname"].PropertyType="bool";		// To change the property type of a column
*/

	// Generate output
	if (tables.Count>0)
	{
#>
<#
//if (string.IsNullOrEmpty(Namespace)) Namespace=ConnectionStringName;
//if (string.IsNullOrEmpty(Namespace)) Namespace="OrmLitePoco";
var manager = Manager.Create(Host, GenerationEnvironment);
manager.StartHeader(); #>// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.



// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using <#=Namespace #>;
namespace <#=Namespace #>
{
<#manager.EndBlock(); #>
<#
foreach(Table tbl in from t in tables where !t.Ignore select t)
{	
///	if(!tbl.Name.StartsWith("t_"))
///	{
///	if(!tbl.Name.StartsWith("v_"))
///		continue;
///	}

manager.StartNewFile(tbl.Name + ".cs");
#>
<# if (MakeSingular) {#>
	[Alias("<#=tbl.Name#>")]
<#}#>
    public partial class <#=tbl.ClassName#><#if (tbl.HasPK() && UseIdAsPK) { #> : IHasId<<#=tbl.PK.PropertyType#>><#}#>  : _BaseModel
    {
<# if (GenerateConstructor) { #>
		public <#=tbl.ClassName#>() 
		{
		}

<# }
foreach(Column col in from c in tbl.Columns where !c.Ignore select c)
{
	EntityInfo entityInfo = entityInfos.GetInfo(tbl.Name, col.Name);	

 if ((col.Name!=col.PropertyName) || (col.IsPK && UseIdAsPK)) { #>
        [Alias("<#=col.Name#>")]
<# }  if (col.PropertyType == "string" && col.Size > 0) { #>
        [StringLength(<#=col.Size#>)]
<# }  if (col.IsAutoIncrement) { #>
     //   [AutoIncrement]
<# }  if (col.IsNullable != true && col.IsAutoIncrement != true) { #>
        [Required]
<# } 
   
   if(entityInfo != null && !string.IsNullOrWhiteSpace(entityInfo.Attributes))
   {
#>
        <#=entityInfo.Attributes#>
<#   
   }
   
   if (!col.IsPK) {
	   if(entityInfo != null && !string.IsNullOrWhiteSpace(entityInfo.DataType))
       {
#>
        public <#=entityInfo.DataType#> <#=col.PropertyName#> { get; set;}
<#
	   }
	   else {
#>
        public <#=col.ProperPropertyType#> <#=col.PropertyName#> { get; set;}
<#		
	   }
   } 
   
   if (col.IsPK && UseIdAsPK) {
	   if(entityInfo != null && !string.IsNullOrWhiteSpace(entityInfo.DataType))
       {
#>
        public <#=entityInfo.DataType#> Id { get; set;}
<# 
	   }
	   else {
#>
        public <#=col.ProperPropertyType#> Id { get; set;}
<# 
		}
   } 
   
   if (col.IsPK && !UseIdAsPK) {

   if (col.IsAutoIncrement) { #>
     [Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]	
	  public <#=col.ProperPropertyType#> <#=col.PropertyName#> { get; set;}
<# 
	   }
		else {  
		if(entityInfo != null && !string.IsNullOrWhiteSpace(entityInfo.DataType))
		{
#>
		[Key]		
        public <#=entityInfo.DataType#> <#=col.PropertyName#> { get; set;}
<# 
		}
		else {  
#>
		[Key]
        public <#=col.ProperPropertyType#> <#=col.PropertyName#> { get; set;}
<#
		}
		}
   } 
#>
<# } #>
    } 
	public enum <#=tbl.ClassName#>_PROPERTIES {

	<#
		foreach(Column col in from c in tbl.Columns where !c.Ignore select c)
		{
	#>
	<#=col.Name#>,
	<# } #>
	
	}
<#  manager.EndBlock(); #>
<#  }   #>
<#manager.StartFooter(); #>
}
#pragma warning restore 1591
<#manager.EndBlock(); #>
<#manager.Process(SplitIntoMultipleFiles); #>
<#  }   #>

